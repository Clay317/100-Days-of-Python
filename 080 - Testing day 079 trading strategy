import pandas as pd
import pandas_datareader as data   
import datetime
 
start = datetime.datetime(2016,1,1)
end = datetime.date.today()
 
short_window = 40
long_window = 100

#initialize dataframe with a signal column
signals = pd.DataFrame(index=google.index)
signals['signal'] = 0.0

#create short moving average
signals['short_mavg'] = google['Close'].rolling(window=short_window, min_periods=1, center=False).mean()

#create long moving average
signals['long_mavg'] = google['Close'].rolling(window=long_window, min_periods=1, center=False).mean()

#create signals
signals['signal'][short_window:] = np.where(signals['short_mavg'][short_window:] > signals['long_mavg'][short_window:], 1.0, 0.0)   

# Generate trading orders
signals['positions'] = signals['signal'].diff()

print(signals)

#begin testing with $10,0000
initial_capital= float(100000.0)

#create dataframe to represent postions
positions = pd.DataFrame(index=signals.index).fillna(0.0)

#buy a 100 shares
positions['google'] = 100*signals['signal']   
  
#initialize the portfolio with value owned   
portfolio = positions.multiply(aapl['Adj Close'], axis=0)

#store the difference in shares owned 
pos_diff = positions.diff()

# Add `holdings` to portfolio
portfolio['holdings'] = (positions.multiply(google['Adj Close'], axis=0)).sum(axis=1)

#include cash in portfolio
portfolio['cash'] = initial_capital - (pos_diff.multiply(google['Adj Close'], axis=0)).sum(axis=1).cumsum()   

#include total in portfolio
portfolio['total'] = portfolio['cash'] + portfolio['holdings']

#include returns in portfolio
portfolio['returns'] = portfolio['total'].pct_change()

#visualize return
import matplotlib.pyplot as plt

fig = plt.figure()

ax1 = fig.add_subplot(111, ylabel='Portfolio value in $')

#plot return
portfolio['total'].plot(ax=ax1, lw=2.)

#plot buy symbols
ax1.plot(portfolio.loc[signals.positions == 1.0].index, portfolio.total[signals.positions == 1.0],'^', markersize=10, color='m')

#plot sell symbols
ax1.plot(portfolio.loc[signals.positions == -1.0].index, portfolio.total[signals.positions == -1.0],'v', markersize=10, color='k')

#show the plot
plt.show()
